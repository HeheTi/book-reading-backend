openapi: '3.1.0'
info:
  title: Book Reading API doks
  description: The API for the Book Reading project
  version: 1.0.0
servers:
  - url: https://book-reading-5q3p.onrender.com/api
paths:
  /users/registration:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCredentials'
      responses:
        '200':
          description: User registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Validation error's description
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
  /users/login:
    post:
      tags:
        - Auth
      summary: Login User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"name" is not allowed'
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email or password invalid
  /users/logout:
    post:
      tags:
        - Auth
      summary: Logout User
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
  /users/refresh:
    post:
      tags:
        - Auth
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
      responses:
        '200':
          description: Successful refresh responses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"refreshToken" is required or invalid'
        '403':
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Invalid signature
components:
  schemas:
    RegisterCredentials:
      required:
        - name
        - email
        - password
        - repeatPassword
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        repeatPassword:
          $ref: '#/components/schemas/Password'
    Password:
      minLength: 6
      type: string
      description: User's password
      example: qwerty123
    UserName:
      maxLength: 50
      minLength: 2
      type: string
      description: User's name
      example: UserName
    Email:
      type: string
      description: User's email
      format: email
      example: UserName@mail.com
    User:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
    RefreshBody:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          $ref: '#/components/schemas/Token'
    InfoMessage:
      type: object
      properties:
        message:
          type: string
    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    LoginResponse:
      type: object
      properties:
        tokens:
          type: object
          properties:
            accessToken:
              type: string
              $ref: '#/components/schemas/Token'
            refreshToken:
              type: string

        user:
          type: object
          properties:
            name:
              $ref: '#/components/schemas/UserName'
            email:
              $ref: '#/components/schemas/Email'
    Token:
      type: string
      description: JWT access token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MTZjM2ZhYWJlZmE1ZjlmYWM0ZjE2OCIsImlhdCI6MTY5NjE5Nzk2MiwiZXhwIjoxNjk2MTk4NTYyfQ.XwkKcvdq33L-pjhGHWhw19-GUHjVVYITJWTDx8R6GsU
    RefreshResponse:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
